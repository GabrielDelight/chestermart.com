{"version":3,"file":"static/js/69.352feaaa.chunk.js","mappings":"oJACA,QAAuB,qBAAvB,EAA8D,gC,yECQ9D,MAwFA,EAxFqB,KACnB,MAAM,IAAEA,EAAF,OAAOC,IAAWC,EAAAA,EAAAA,IAAU,CAChCC,UAAW,MAGNC,EAAOC,IAAYC,EAAAA,EAAAA,UAAiB,IAC3C,IAAKC,EAAOC,IAAYF,EAAAA,EAAAA,UAKrB,CACDG,SAAU,GACVC,MAAO,GACPC,SAAU,IACVC,SAAU,MAGRC,EAAM,IAAIC,gBAAgBC,OAAOC,SAASC,QAC1CP,EAAQG,EAAIK,IAAI,SAChBT,EAAWI,EAAIK,IAAI,YACnBP,EAAWE,EAAIK,IAAI,YACnBN,EAAWC,EAAIK,IAAI,aAEvBC,EAAAA,EAAAA,YAAU,KACRX,EAAS,CACPE,QACAD,WACAE,WACAC,aAGFQ,GAAS,GAER,CAACV,EAAOD,EAAUE,EAAUC,IAE/B,MAAM,KACJS,EAAO,GADH,UAEJC,EAFI,QAGJF,IACEG,EAAAA,EAAAA,IAAmB,0BAAD,OACMnB,EADN,sBACyBG,EAAME,SAD/B,mBACkDF,EAAMG,MADxD,sBAC2EH,EAAMK,SADjF,sBACuGL,EAAMI,WAYnI,OATAQ,EAAAA,EAAAA,YAAU,KACJlB,IACFI,EAASD,EAAQ,IACjBoB,YAAW,KACTJ,GAAS,GACR,KACJ,GACA,CAACnB,KAGF,SAACwB,EAAA,EAAD,WACE,kBAAMC,UAAWC,EAAjB,WACE,4BACE,SAAC,IAAD,OAEF,gCACA,oCAEE,gBAAKD,UAAWC,EAAhB,SACGN,EAAKO,KAAKC,IAEP,SAACC,EAAA,EAAD,CACEC,MAAOF,EAAKG,OACZC,KAAMJ,EAAKI,KACXC,MAAOL,EAAKK,MAEZC,IAAKN,EAAKM,IACVN,KAAMA,GAFDA,EAAKO,QAQjBd,IAAa,SAACe,EAAA,EAAD,IAEbhB,EAAKiB,OAAS,IAAmB,IAAdhB,GAAsB,SAACiB,EAAA,EAAD,IAAe,MAEzD,gBAAKH,GAAG,QAAQpC,IAAKA,EAAKwC,MAAO,CAAEC,OAAQ,iBA5BnD,C","sources":["webpack://my-app/./src/Styles/Filter.module.css?544d","components/pages/FilterScreen.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Filter_main__QMU4U\",\"product_wrapper\":\"Filter_product_wrapper__tacB+\"};","import React, { useEffect, useState } from \"react\";\nimport Wrapper from \"../UI/Wrapper/Wrapper\";\nimport classes from \"../../Styles/Filter.module.css\";\nimport Filter from \"../UI/Filter/FIlter\";\nimport ProductList from \"../ProductList/ProductList\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useGetRequestQuery } from \"../../store/services/users\";\nimport Spinner from \"../UI/Spinner/Spinner\";\nimport NotFound from \"../UI/NotFound/NotFound\";\nconst FilterScreen = () => {\n  const { ref, inView } = useInView({\n    threshold: 0.1,\n  });\n\n  const [limit, setLimit] = useState<number>(10);\n  let [items, setItems] = useState<{\n    category: string;\n    brand: string;\n    minPrice: number;\n    maxPrice: number;\n  }>({\n    category: \"\",\n    brand: \"\",\n    minPrice: 1000,\n    maxPrice: 20000,\n  });\n\n  let url = new URLSearchParams(window.location.search);\n  let brand = url.get(\"brand\") as unknown as string;\n  let category = url.get(\"category\") as unknown as string;\n  let minPrice = url.get(\"minPrice\") as unknown as number;\n  let maxPrice = url.get(\"maxPrice\") as unknown as number;\n\n  useEffect(() => {\n    setItems({\n      brand,\n      category,\n      minPrice,\n      maxPrice,\n    });\n\n    refetch();\n\n  }, [brand, category, minPrice, maxPrice]);\n\n  const {\n    data = [],\n    isLoading,\n    refetch,\n  } = useGetRequestQuery(\n    `/filter-products?limit=${limit}&&category=${items.category}&&brand=${items.brand}&&maxPrice=${items.maxPrice}&&minPrice=${items.minPrice}`\n  );\n\n  useEffect(() => {\n    if (inView) {\n      setLimit(limit + 10);\n      setTimeout(() => {\n        refetch();\n      }, 100);\n    }\n  }, [inView]);\n\n  return (\n    <Wrapper>\n      <main className={classes.main}>\n        <aside>\n          <Filter />\n        </aside>\n        <article>\n        <h3>Filter</h3>\n\n          <div className={classes.product_wrapper}>\n            {data.map((item: any) => {\n              return (\n                <ProductList\n                  image={item.image1}\n                  name={item.name}\n                  price={item.price}\n                  key={item.id}\n                  _id={item._id}\n                  item={item}\n                />\n              );\n            })}\n          </div>\n\n          {isLoading && <Spinner />}\n\n          {data.length < 1 && isLoading === false ? <NotFound /> : null}\n\n          <div id=\"posts\" ref={ref} style={{ height: \"20px\" }} />\n        </article>\n      </main>\n    </Wrapper>\n  );\n};\n\nexport default FilterScreen;\n"],"names":["ref","inView","useInView","threshold","limit","setLimit","useState","items","setItems","category","brand","minPrice","maxPrice","url","URLSearchParams","window","location","search","get","useEffect","refetch","data","isLoading","useGetRequestQuery","setTimeout","Wrapper","className","classes","map","item","ProductList","image","image1","name","price","_id","id","Spinner","length","NotFound","style","height"],"sourceRoot":""}